// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:hope354GIST@localhost/Portal_dev"
}

model User {
  id             Int        @id @default(autoincrement()) // decided to use int instead of uuid
  email          String     @unique
  password       String
  username       String     @unique
  type           Int        @default(0) // 0 for user, 1 for creator, 2 for company, 3 for not sure
  categories     Category[]
  profile        Profile?
  posts          Post[]
  //profile picture should be part of profile
  profilePicture String?
  createdAt      DateTime   @default(now())

  //user followers is all the people following the user
  //it's getting every one where the current user is the "following"
  followers Follow[] @relation("following")
  //user following is all the people they're following
  //it's getting every follow where the current user is the "follower" 
  following Follow[] @relation("followers")

  likedPosts       Like[]
  comments         Comment[]
  likedComments    CommentLike[]
  sentMessages     Message[]     @relation("sentMessages")
  receivedMessages Message[]     @relation("receivedMessages")
  ratings          UserRating[]
  verified         Boolean       @default(false)
}

model Category {
  id      Int              @id @default(autoincrement())
  name    String
  users   User[]
  summary CategorySummary?
  posts   Post[]
  ratings UserRating[]
}

model UserRating {
  id         Int      @id @default(autoincrement())
  rating     Int
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId])
}

model Profile {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int     @unique
  name       String?
  bio        String?
  location   String?
  occupation String?
  followers  Int?
}

model CategorySummary {
  id           Int      @id @default(autoincrement())
  summary      String
  hardSkills   String
  commonTraits String
  education    String
  averagePay   String
  threatOfAI   String
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   Int      @unique
}

model Post {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url         String?
  description String
  createdAt   DateTime @default(now())
  likes       Like[]

  userId  Int
  Comment Comment[]

  categories Category[]
}

model Like {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@id([userId, postId])
}

model Comment {
  id      Int           @id @default(autoincrement())
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  comment String
  likes   CommentLike[] @relation(fields: [], references: [])
}

model CommentLike {
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  commentId Int

  @@id([userId, commentId])
}

model Follow {
  //followerId references id in User.
  //when you're getting a user's following (like the people who the user is following), 
  //you're looking for when the current user is the follower in this model,
  //hence why the follower below has a relation with the User model's following
  //https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations
  //follower is the user that is following the other user
  follower   User     @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int
  //followee is the user that is being followed (the user the follower is following)
  followee   User     @relation("following", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId Int
  createdAt  DateTime @default(now())

  @@id([followerId, followeeId])
}

model Message {
  id         Int      @id @default(autoincrement())
  sender     User     @relation(name: "sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation(name: "receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  text       String
  senderId   Int
  receiverId Int
  createdAt  DateTime @default(now())
}
